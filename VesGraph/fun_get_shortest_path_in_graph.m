function path_str = fun_get_shortest_path_in_graph(undirected_graph, mask_size, sub_source, sub_target)
% fun_get_shortest_path_in_graph finds the shortest path on the graph
% between two given pixels
% Input: 
%   undirected_graph: grpah structure generated by
%   fun_skeleton_to_pixel_graph
%   mask_size: 1-by-2 numerical vector, size of the image/mask for
%   generating the skeleton that get converted to the undirected graph 
%   sub_source: 1-by-2 numerical vector, subscript coordinate (y, x) of the
%   starting pixel
%   sub_target: 1-by-2 numerical vector, subscript coordinate (y, x) of the
%   target pixel
% Output: 
%   path_str: MATLAB structure with fields: 
%       mask_size, sub_source, sub_target: same as input 
%       path_ind_w_ep: 1-by-N vector, linear indices of the path pixel in
%       the mask (contains both end pixels of the path) 
%       path_length: numerical scalar, length of the path in pixel 
%       path_sub_w_ep: N-by-2 array, subscript of the path pixel in the
%       mask (contains both end pixels of the path, in the order of (y, x),
%       or (row, col)
%
% Implemented by Xiang Ji on 12/13/2019

path_str.mask_size = mask_size;
path_str.sub_source = sub_source;
path_str.sub_target = sub_target;

start_ind = sub2ind(mask_size, sub_source(1), sub_source(2));
end_ind = sub2ind(mask_size, sub_target(1), sub_target(2));
[path_str.path_ind_w_ep, path_str.path_length] = shortestpath(undirected_graph, start_ind, end_ind, 'Method', 'positive');
% Convert position indices to subscripts
path_str.path_sub_w_ep = nan(numel(path_str.path_ind_w_ep), 2);
[path_str.path_sub_w_ep(:, 1), path_str.path_sub_w_ep(:, 2)] = ind2sub(mask_size, path_str.path_ind_w_ep);
end